# -*- coding: utf-8 -*-
"""sklearn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wm-K2uYuPm7zFZ1ZTCKY9UcND4K2nfSL
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn import svm
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
# %matplotlib inline

#Loading dataset
wine = pd.read_csv('winequality-red(1).csv', sep= ';')

wine.head(10)

wine.info()

wine.isnull().sum()

bins = (2, 6, 9)
group_names = ['bad', 'good']
wine['quality'] = pd.cut(wine['quality'], bins = bins, labels = group_names)
wine['quality'].unique()

lable_quality = LabelEncoder()

wine['quality'] = lable_quality.fit_transform(wine['quality'])

wine.head(10)



wine['quality'].value_counts()

counts = wine['quality'].value_counts()
plt.bar(counts.index, counts.values, color=['blue', 'orange'])
plt.xlabel('Quality')
plt.ylabel('Count')
plt.title('Distribution of Quality Categories')
plt.xticks(ticks=[0, 1], labels=['bad', 'good'])
plt.show()

X = wine.drop('quality', axis = 1)
y = wine['quality']

#Train and Test splitting of data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

#Standard scaling
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train[:10]

#Random Forest Classifier
rfc = RandomForestClassifier(n_estimators=200)
rfc.fit(X_train, y_train)
pred_rfc = rfc.predict(X_test)

pred_rfc[:20]

#Evaluate model
print(classification_report(y_test, pred_rfc))

#confusion_matrix
print(confusion_matrix(y_test, pred_rfc))

#SVM Classifier
clf = svm.SVC()
clf.fit(X_train, y_train)
pred_clf = clf.predict(X_test)

print(classification_report(y_test, pred_clf))
print(confusion_matrix(y_test, pred_clf))

#Neural Network
mlp = MLPClassifier(hidden_layer_sizes=(11,11,11),max_iter=500)
mlp.fit(X_train,y_train)
pred_mlp = mlp.predict(X_test)

print(classification_report(y_test,pred_mlp))
print(confusion_matrix(y_test,pred_mlp))